// pcie_cv_qsys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module pcie_cv_qsys_mm_interconnect_0 (
		input  wire        pcie_cv_hip_avmm_0_coreclkout_clk,                                        //                                      pcie_cv_hip_avmm_0_coreclkout.clk
		input  wire        onchip_memory2_0_reset1_reset_bridge_in_reset_reset,                      //                      onchip_memory2_0_reset1_reset_bridge_in_reset.reset
		input  wire        pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset_reset, // pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset.reset
		input  wire [63:0] pcie_cv_hip_avmm_0_Rxm_BAR0_address,                                      //                                        pcie_cv_hip_avmm_0_Rxm_BAR0.address
		output wire        pcie_cv_hip_avmm_0_Rxm_BAR0_waitrequest,                                  //                                                                   .waitrequest
		input  wire [6:0]  pcie_cv_hip_avmm_0_Rxm_BAR0_burstcount,                                   //                                                                   .burstcount
		input  wire [7:0]  pcie_cv_hip_avmm_0_Rxm_BAR0_byteenable,                                   //                                                                   .byteenable
		input  wire        pcie_cv_hip_avmm_0_Rxm_BAR0_read,                                         //                                                                   .read
		output wire [63:0] pcie_cv_hip_avmm_0_Rxm_BAR0_readdata,                                     //                                                                   .readdata
		output wire        pcie_cv_hip_avmm_0_Rxm_BAR0_readdatavalid,                                //                                                                   .readdatavalid
		input  wire        pcie_cv_hip_avmm_0_Rxm_BAR0_write,                                        //                                                                   .write
		input  wire [63:0] pcie_cv_hip_avmm_0_Rxm_BAR0_writedata,                                    //                                                                   .writedata
		output wire [9:0]  onchip_memory2_0_s1_address,                                              //                                                onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                                //                                                                   .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                                             //                                                                   .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                                            //                                                                   .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                                           //                                                                   .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                                           //                                                                   .chipselect
		output wire        onchip_memory2_0_s1_clken                                                 //                                                                   .clken
	);

	wire          pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_waitrequest;   // pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_waitrequest -> pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_waitrequest
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_readdata;      // pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_readdata -> pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_readdata
	wire          pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_debugaccess;   // pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_debugaccess -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_debugaccess
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_address;       // pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_address -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_address
	wire          pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_read;          // pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_read -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_read
	wire    [7:0] pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_byteenable;    // pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_byteenable -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_byteenable
	wire          pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_readdatavalid; // pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_readdatavalid -> pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_readdatavalid
	wire          pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_lock;          // pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_lock -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_lock
	wire          pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_write;         // pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_write -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_write
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_writedata;     // pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_writedata -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_writedata
	wire    [9:0] pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_burstcount;    // pcie_cv_hip_avmm_0_Rxm_BAR0_translator:uav_burstcount -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                              // rsp_mux:src_valid -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:rp_valid
	wire  [176:0] rsp_mux_src_data;                                                               // rsp_mux:src_data -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:rp_data
	wire          rsp_mux_src_ready;                                                              // pcie_cv_hip_avmm_0_Rxm_BAR0_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                            // rsp_mux:src_channel -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                      // rsp_mux:src_startofpacket -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                        // rsp_mux:src_endofpacket -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:rp_endofpacket
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                          // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                       // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                       // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [63:0] onchip_memory2_0_s1_agent_m0_address;                                           // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                        // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                              // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                     // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                              // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                         // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                             // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                        // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                      // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [141:0] onchip_memory2_0_s1_agent_rf_source_data;                                       // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                      // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                              // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                   // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [141:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                    // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                   // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                           // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                             // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_valid;                                     // pcie_cv_hip_avmm_0_Rxm_BAR0_agent:cp_valid -> router:sink_valid
	wire  [176:0] pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_data;                                      // pcie_cv_hip_avmm_0_Rxm_BAR0_agent:cp_data -> router:sink_data
	wire          pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_ready;                                     // router:sink_ready -> pcie_cv_hip_avmm_0_Rxm_BAR0_agent:cp_ready
	wire          pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_startofpacket;                             // pcie_cv_hip_avmm_0_Rxm_BAR0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_endofpacket;                               // pcie_cv_hip_avmm_0_Rxm_BAR0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                               // router:src_valid -> cmd_demux:sink_valid
	wire  [176:0] router_src_data;                                                                // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                               // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                             // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                             // onchip_memory2_0_s1_agent:rp_valid -> router_001:sink_valid
	wire  [140:0] onchip_memory2_0_s1_agent_rp_data;                                              // onchip_memory2_0_s1_agent:rp_data -> router_001:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                             // router_001:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                     // onchip_memory2_0_s1_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                       // onchip_memory2_0_s1_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                                // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [140:0] onchip_memory2_0_s1_burst_adapter_source0_data;                                 // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                                // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [0:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                              // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;                        // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                          // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [176:0] cmd_demux_src0_data;                                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [176:0] rsp_demux_src0_data;                                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          router_001_src_valid;                                                           // router_001:src_valid -> onchip_memory2_0_s1_rsp_width_adapter:in_valid
	wire  [140:0] router_001_src_data;                                                            // router_001:src_data -> onchip_memory2_0_s1_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                           // onchip_memory2_0_s1_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                         // router_001:src_channel -> onchip_memory2_0_s1_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                   // router_001:src_startofpacket -> onchip_memory2_0_s1_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                     // router_001:src_endofpacket -> onchip_memory2_0_s1_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_valid;                                // onchip_memory2_0_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [176:0] onchip_memory2_0_s1_rsp_width_adapter_src_data;                                 // onchip_memory2_0_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_ready;                                // rsp_demux:sink_ready -> onchip_memory2_0_s1_rsp_width_adapter:out_ready
	wire    [0:0] onchip_memory2_0_s1_rsp_width_adapter_src_channel;                              // onchip_memory2_0_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket;                        // onchip_memory2_0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket;                          // onchip_memory2_0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                              // cmd_mux:src_valid -> onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [176:0] cmd_mux_src_data;                                                               // cmd_mux:src_data -> onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                              // onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                            // cmd_mux:src_channel -> onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                      // cmd_mux:src_startofpacket -> onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                        // cmd_mux:src_endofpacket -> onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_valid;                                // onchip_memory2_0_s1_cmd_width_adapter:out_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [140:0] onchip_memory2_0_s1_cmd_width_adapter_src_data;                                 // onchip_memory2_0_s1_cmd_width_adapter:out_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_ready;                                // onchip_memory2_0_s1_burst_adapter:sink0_ready -> onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [0:0] onchip_memory2_0_s1_cmd_width_adapter_src_channel;                              // onchip_memory2_0_s1_cmd_width_adapter:out_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;                        // onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;                          // onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                 // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                  // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                  // avalon_st_adapter:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                   // avalon_st_adapter:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                  // avalon_st_adapter:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (7),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcie_cv_hip_avmm_0_rxm_bar0_translator (
		.clk                    (pcie_cv_hip_avmm_0_coreclkout_clk),                                              //                       clk.clk
		.reset                  (pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address            (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pcie_cv_hip_avmm_0_Rxm_BAR0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pcie_cv_hip_avmm_0_Rxm_BAR0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (pcie_cv_hip_avmm_0_Rxm_BAR0_burstcount),                                         //                          .burstcount
		.av_byteenable          (pcie_cv_hip_avmm_0_Rxm_BAR0_byteenable),                                         //                          .byteenable
		.av_read                (pcie_cv_hip_avmm_0_Rxm_BAR0_read),                                               //                          .read
		.av_readdata            (pcie_cv_hip_avmm_0_Rxm_BAR0_readdata),                                           //                          .readdata
		.av_readdatavalid       (pcie_cv_hip_avmm_0_Rxm_BAR0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pcie_cv_hip_avmm_0_Rxm_BAR0_write),                                              //                          .write
		.av_writedata           (pcie_cv_hip_avmm_0_Rxm_BAR0_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.av_debugaccess         (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (pcie_cv_hip_avmm_0_coreclkout_clk),                   //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                   //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                           //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                        //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                       //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                      //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                           //                         .clken
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (176),
		.PKT_ORI_BURST_SIZE_L      (174),
		.PKT_RESPONSE_STATUS_H     (173),
		.PKT_RESPONSE_STATUS_L     (172),
		.PKT_QOS_H                 (161),
		.PKT_QOS_L                 (161),
		.PKT_DATA_SIDEBAND_H       (159),
		.PKT_DATA_SIDEBAND_L       (159),
		.PKT_ADDR_SIDEBAND_H       (158),
		.PKT_ADDR_SIDEBAND_L       (158),
		.PKT_BURST_TYPE_H          (157),
		.PKT_BURST_TYPE_L          (156),
		.PKT_CACHE_H               (171),
		.PKT_CACHE_L               (168),
		.PKT_THREAD_ID_H           (164),
		.PKT_THREAD_ID_L           (164),
		.PKT_BURST_SIZE_H          (155),
		.PKT_BURST_SIZE_L          (153),
		.PKT_TRANS_EXCLUSIVE       (141),
		.PKT_TRANS_LOCK            (140),
		.PKT_BEGIN_BURST           (160),
		.PKT_PROTECTION_H          (167),
		.PKT_PROTECTION_L          (165),
		.PKT_BURSTWRAP_H           (152),
		.PKT_BURSTWRAP_L           (152),
		.PKT_BYTE_CNT_H            (151),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (162),
		.PKT_SRC_ID_L              (162),
		.PKT_DEST_ID_H             (163),
		.PKT_DEST_ID_L             (163),
		.ST_DATA_W                 (177),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_cv_hip_avmm_0_rxm_bar0_agent (
		.clk                   (pcie_cv_hip_avmm_0_coreclkout_clk),                                              //       clk.clk
		.reset                 (pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.av_address            (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pcie_cv_hip_avmm_0_rxm_bar0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                              //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (140),
		.PKT_ORI_BURST_SIZE_L      (138),
		.PKT_RESPONSE_STATUS_H     (137),
		.PKT_RESPONSE_STATUS_L     (136),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (131),
		.PKT_PROTECTION_L          (129),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (126),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (127),
		.PKT_DEST_ID_L             (127),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (141),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (pcie_cv_hip_avmm_0_coreclkout_clk),                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (142),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (pcie_cv_hip_avmm_0_coreclkout_clk),                    //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	pcie_cv_qsys_mm_interconnect_0_router router (
		.sink_ready         (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_ready),                               //      sink.ready
		.sink_valid         (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_valid),                               //          .valid
		.sink_data          (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_data),                                //          .data
		.sink_startofpacket (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (pcie_cv_hip_avmm_0_rxm_bar0_agent_cp_endofpacket),                         //          .endofpacket
		.clk                (pcie_cv_hip_avmm_0_coreclkout_clk),                                        //       clk.clk
		.reset              (pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	pcie_cv_qsys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                  //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (pcie_cv_hip_avmm_0_coreclkout_clk),                   //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (124),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (141),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (108),
		.OUT_BURSTWRAP_H           (116),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (pcie_cv_hip_avmm_0_coreclkout_clk),                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	pcie_cv_qsys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pcie_cv_hip_avmm_0_coreclkout_clk),                                        //       clk.clk
		.reset              (pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                         //      sink.ready
		.sink_channel       (router_src_channel),                                                       //          .channel
		.sink_data          (router_src_data),                                                          //          .data
		.sink_startofpacket (router_src_startofpacket),                                                 //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                   //          .endofpacket
		.sink_valid         (router_src_valid),                                                         //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                     //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                     //          .valid
		.src0_data          (cmd_demux_src0_data),                                                      //          .data
		.src0_channel       (cmd_demux_src0_channel),                                                   //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                                //          .endofpacket
	);

	pcie_cv_qsys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pcie_cv_hip_avmm_0_coreclkout_clk),                   //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                           //          .endofpacket
	);

	pcie_cv_qsys_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (pcie_cv_hip_avmm_0_coreclkout_clk),                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (onchip_memory2_0_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (onchip_memory2_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (onchip_memory2_0_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (onchip_memory2_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                               //          .endofpacket
	);

	pcie_cv_qsys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pcie_cv_hip_avmm_0_coreclkout_clk),                                        //       clk.clk
		.reset               (pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                        //          .valid
		.src_data            (rsp_mux_src_data),                                                         //          .data
		.src_channel         (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (137),
		.IN_PKT_RESPONSE_STATUS_L      (136),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (138),
		.IN_PKT_ORI_BURST_SIZE_H       (140),
		.IN_ST_DATA_W                  (141),
		.OUT_PKT_ADDR_H                (135),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (151),
		.OUT_PKT_BYTE_CNT_L            (142),
		.OUT_PKT_TRANS_COMPRESSED_READ (136),
		.OUT_PKT_BURST_SIZE_H          (155),
		.OUT_PKT_BURST_SIZE_L          (153),
		.OUT_PKT_RESPONSE_STATUS_H     (173),
		.OUT_PKT_RESPONSE_STATUS_L     (172),
		.OUT_PKT_TRANS_EXCLUSIVE       (141),
		.OUT_PKT_BURST_TYPE_H          (157),
		.OUT_PKT_BURST_TYPE_L          (156),
		.OUT_PKT_ORI_BURST_SIZE_L      (174),
		.OUT_PKT_ORI_BURST_SIZE_H      (176),
		.OUT_ST_DATA_W                 (177),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s1_rsp_width_adapter (
		.clk                  (pcie_cv_hip_avmm_0_coreclkout_clk),                       //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_001_src_valid),                                    //      sink.valid
		.in_channel           (router_001_src_channel),                                  //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_001_src_ready),                                    //          .ready
		.in_data              (router_001_src_data),                                     //          .data
		.out_endofpacket      (onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (135),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (151),
		.IN_PKT_BYTE_CNT_L             (142),
		.IN_PKT_TRANS_COMPRESSED_READ  (136),
		.IN_PKT_TRANS_WRITE            (138),
		.IN_PKT_BURSTWRAP_H            (152),
		.IN_PKT_BURSTWRAP_L            (152),
		.IN_PKT_BURST_SIZE_H           (155),
		.IN_PKT_BURST_SIZE_L           (153),
		.IN_PKT_RESPONSE_STATUS_H      (173),
		.IN_PKT_RESPONSE_STATUS_L      (172),
		.IN_PKT_TRANS_EXCLUSIVE        (141),
		.IN_PKT_BURST_TYPE_H           (157),
		.IN_PKT_BURST_TYPE_L           (156),
		.IN_PKT_ORI_BURST_SIZE_L       (174),
		.IN_PKT_ORI_BURST_SIZE_H       (176),
		.IN_ST_DATA_W                  (177),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (137),
		.OUT_PKT_RESPONSE_STATUS_L     (136),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (138),
		.OUT_PKT_ORI_BURST_SIZE_H      (140),
		.OUT_ST_DATA_W                 (141),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (pcie_cv_hip_avmm_0_coreclkout_clk),                       //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                       //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                     //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                       //          .ready
		.in_data              (cmd_mux_src_data),                                        //          .data
		.out_endofpacket      (onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	pcie_cv_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pcie_cv_hip_avmm_0_coreclkout_clk),                   // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

endmodule
